;▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
;▓▓                                                                ▓▓
;▓▓     Процедура определения типа процкессора и режима            ▓▓
;▓▓     его работы.                                                ▓▓
;▓▓                                                                ▓▓
;▓▓     Вхолных параметров нет                                     ▓▓
;▓▓                                                                ▓▓
;▓▓     Выходные параметры:                                        ▓▓
;▓▓   После выполнения процедуры рагистр AL содержит тип           ▓▓
;▓▓   процессора в виде одного мз следующих чисел:                 ▓▓
;▓▓         - 0 ..... INTEL 8088                                   ▓▓
;▓▓         - 1 ..... INTEL 8086                                   ▓▓
;▓▓         - 2 ..... NEC V20                                      ▓▓
;▓▓         - 3 ..... NEC V30                                      ▓▓
;▓▓         - 4 ..... INTEL 80188                                  ▓▓
;▓▓         - 5 ..... INTEL 80186                                  ▓▓
;▓▓         - 6 ..... INTEL 80286                                  ▓▓
;▓▓         - 7 ..... INTEL 80386/80486                            ▓▓
;▓▓   Содержимое регистра AH существенно только для                ▓▓
;▓▓   процессора 80386. Если регистр AH обнулен, то лействует      ▓▓
;▓▓   процессор 80386. Программа функционирует в режиме            ▓▓
;▓▓   VIRTUAL 8086. Причем если AH содержит 1, то IOPL = 3,        ▓▓
;▓▓   а если 2, то IOPL < 3. Ни один другой регистр не измениется. ▓▓
;▓▓                                                                ▓▓
;▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓

          .MODEL   large
          .DATA
port_21   db       0        ; область сохранения порта 21h

          .CODE
          .286p
          public _computer_type

_computer_type   proc    near
          push     bx       ; сохранить рабочие регистры
          push     cx
          push     si
          sub      bx,bx    ; обнулить индикатор процессора
          push     sp       ; сохранить SP
          pop      ax       ; восстановить сохраненное значение

          cmp      ax,sp    ; возвращено то, что надо ?
          jne      ct_000   ; нет, это не
                            ; INTEL 80286/80386
          mov      ax,7000h ; попробовать установить флажки
                            ;  NESTED TASK и IOPL = 3
          push     ax
          popf
          pushf             ; сохранить установленные
                            ;  флажки в стеке
          pop      ax       ; выьрать флажки из стека
          mov      bl,6     ; заранее установить признак
                            ;  процессора
                            ;  INTEL 80286
          and      ax,7000h ; установлены флажки NESTED
                            ;  TASK и IOPL = 3 ?
          jz       ct_200   ; нет, это процессор
                            ;  INTEL 80286
          inc      bx       ; установить прмзнак процессора
                            ;  INTEL 80386/80486
          smsw     ax       ; выбрать младшую часть регистра
          test     al,1     ; CR0
                            ;  VIRTUAL 8086 ?
          jz       ct_200   ; нет, все сделано
          call     TEST_IOPL; проверить IOPL
          mov      bh,al    ; загрузить индикатор IOPL
          jmp      short ct_200
ct_000:
          mov      bl,4     ; заранее установить признак
                            ; процессора INTEL 80188
          mov      cl,33    ; проверить, как работает сдвиг
          mov      ax,-1
          shl      ax,cl
          jnz      short ct_100
                            ; INTEL 80188/80186, поскольку
                            ; для слвига используется
                            ; модуль значения сдвига
          mov      bl,2     ; Заранее установить признак
                            ; процессора NEC V20
          mov      cx,-1    ; выполнить команду REP LODSB с
                            ; заменой сегментного регистра
          jmp      short $+2
          db       0f3h,026h,0ach
          jcxz     ct_100   ; NEC V20/V30, поскольку
                            ; работает замена
                            ; сегментного регистра
          sub      bx,bx    ; установить признак процессора
                            ; INTEL 8088/8086
ct_100:
          call     test_buffer ; проверить длину буфера
                               ; предвыборки команд
          jcxz     ct_200   ; только 6 байт
          inc      bx       ; увеличить номер процессора
ct_200:
          mov      ax,bx    ; сохранить индикатор процессора
                            ; и режима его работы
          pop      si
          pop      cx
          pop      bx
          ret
_computer_type    endp

;▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
;▓▓                                                        ▓▓
;▓▓        П Р О В Е Р К А     I O P L                     ▓▓
;▓▓    Данная процедура определяет уровень привелегий      ▓▓
;▓▓  ввода и режима действующий в данный момент для        ▓▓
;▓▓  режима VIRTUAL 8086.                                  ▓▓
;▓▓    После выполнения процедуры регистр AL будет         ▓▓
;▓▓  содержать код уровня привелегий (1, если IOPL = 3;    ▓▓
;▓▓  2, если IOPL < 3), остальные регистры не изменяются.  ▓▓
;▓▓                                                        ▓▓
;▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓

test_iopl  proc   near
           push   bx                ; сохранить рабочие регистры
           push   cx
           cli                      ; запретить прерывания
           in     al,21h
           mov    port_21,al
           mov    al,11111110b      ; заблокировать контролер
                                    ; прерываний и разрешить
                                    ; только прерывания от таймера
           out    21h,al
           jmp    short $+2
           sti                      ; разрешить прерывания
           mov    ax,3              ; получить производительность
                                    ; процессора для первой
                                    ; тестовой
                                    ; последовательности коианд
           mov    bx,offset ti_100
           call   power_meter
           mov    cx,ax             ; сохранить предоставленное
                                    ; значение переход,
           jcxz   ti_000            ; если произошло что-то
                                    ; странное
           mov    ax,3              ; получить производительность
                                    ; процессора для второй
                                    ; тестовой последовательности
                                    ; команд
           mov    bx,offset ti_200
           call   power_meter
           cmp    ax,cx             ; вторая тестовая
                                    ; последовательность
                                    ; выполняется не медленнее
                                    ; первой ?
           jnb    ti_010            ; да, переход
           shl    ax,1              ; получить удвоенную
                                    ; производительность
                                    ; для второй тестовой
                                    ; последовательности

          cmp     ax,cx             ; вторая тестовая
                                    ; последовательность
                                    ; выполняется намного медленнее
                                    ; первой ?
          jnb     ti_010            ; нет, переход
ti_000:
          mov     bl,2              ; установить индикатор
                                    ; IOPL <60> 3
          jmp     short ti_020
ti_010:
          mov     bl,1              ; установить индикатор IOPL = 3
ti_020:
          cli                       ; разрешить работать контролуру
                                    ; прерываний
          mov     al,port_21
          out     21h,al
          jmp     short $+2
          sti
          mov     al,bl             ; сохранить индикатор IOPL
          pop     cx                ; востановить рабочие регистры
          pop     bx
          ret
;──────────────────────────────────────────────────────────────┐
          EVEN            ; ПЕРВАЯ ТЕСТОВАЯ ПОСЛЕДОВАТЕЛЬНОСТЬ │
ti_100:                   ;                                    │
          nop             ;                                    │
          nop             ;                                    │
          ret             ;                                    │
;──────────────────────────────────────────────────────────────┘
;──────────────────────────────────────────────────────────────┐
          EVEN            ; ВТОРАЯ ТЕСТОВАЯ ПОСЛЕДОВАТЕЛЬНОСТЬ │
ti_200:                   ;                                    │
          cli             ;                                    │                                    │
          sti             ;                                    │
          ret             ;                                    │
;──────────────────────────────────────────────────────────────┘
test_iopl  endp

;▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
;▓▓                                                               ▓▓
;▓▓       О П Р Е Д Е Л Е Н И Е  Д Л И Н Ы   Б У Ф Е Р А          ▓▓
;▓▓                                                               ▓▓
;▓▓    Эта процедура определяет длину буфера предвыборки команд   ▓▓
;▓▓  в процессоре и возвращает в регистре CX нулевое значение,    ▓▓
;▓▓  если длина буфера равна 6 байт.                              ▓▓
;▓▓    После выполнения процедуры содержимое регистра AX будет    ▓▓
;▓▓  непредсказуемо, регистр CX содержит индикатор длины буфера,  ▓▓
;▓▓  а остальные регистры не изменяются.                          ▓▓
;▓▓                                                               ▓▓
;▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓

test_buffer   proc     near
        push      es                ; сохранить рабочие
                                    ; регистры
        push      di
        std                         ; установить обратное
                                    ; направление пересылки
        push      cs                ; загрузить ES равным CS
        pop       es
        mov       di,offset tb_2    ; подготовиться к
                                    ; модификации цепочки
                                    ; команд
        mov       al,byte ptr cs:tb_1
        mov       cx,3
        cli                         ; запретить прерывания и
                                    ; збросить содержимое буфера
                                    ; предвыборки команд
        rep  stosb                  ; выполнить модификацию
                                    ; цепочки команд,
                                    ; которая уже в это время
                                    ; находится в буфере
;────────────────────────────────────────────────────────────┐
                       ; позиция              длина          │
                       ; буфера              команды         │
        cld            ;    2                   1            │
        nop            ;    3                   1            │
        nop            ;    4                   1            │
        nop            ;    5                   1            │
        inc       cx   ;    6                   1            │
tb_1:   sti            ;    7                   1            │
tb_2:   sti            ;    8                   1            │
;────────────────────────────────────────────────────────────┘
        pop       di                ; восстановить рабочие
                                    ; регистры
        pop       es
        ret
test_buffer     endp

;▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
;▓▓                                                              ▓▓
;▓▓   И З М Е Р Е Н И Е  П Р О И З В О Д И Т Е Л Ь Н О С Т И     ▓▓
;▓▓     Данная процедура вычисляет число тестовых последова-     ▓▓
;▓▓  тельностей, выполняемых процессором за 1 мс. Число изме-    ▓▓
;▓▓  рений должно быть загружено в регистр AX, а адрес тестовой  ▓▓
;▓▓  последовательности, оформленой в виде процедуры NEAR,       ▓▓
;▓▓  - в регистр AX.                                             ▓▓
;▓▓     Тестовая последовательность не должна изменять ни один   ▓▓
;▓▓  из регистров, кроме регистра AX, который может использова-  ▓▓
;▓▓  ться в качестве рабочего. Рекомендуется тестовую последова- ▓▓
;▓▓  тельность распологать на границе слова, поскольку выравни-  ▓▓
;▓▓  вание резко влияет на измерение производительности процес-  ▓▓
;▓▓  сора.                                                       ▓▓
;▓▓     Перед входом в процедуру должна быть запрещена обработка ▓▓
;▓▓  любого прерывания кроме прерывания от таймера (на уровне    ▓▓
;▓▓  контролера прерываний). После выполнения процедуры в ре-    ▓▓
;▓▓  гистр AX будет загружено среднее значение числа тестовых    ▓▓
;▓▓  последовательностей, выполняемых за 1 мс.                   ▓▓
;▓▓  Содержимое остальных регистров не изменяется.               ▓▓
;▓▓                                                              ▓▓
;▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓

;   ПРОГРАМНЫЕ ОБОЗНАЧЕНИЯ И КОНСТАНТЫ

power_amt      dw       0           ; число проходов измерителя
                                    ; призводительности
iv8_offset     equ      word ptr es:[08h*4]   ; вектор
                                              ; прерывания 08h
iv8_segment    equ      word ptr es:[08h*4+2]
handler_8      label    dword       ; область сохранения
                                    ; вектора 08h
sv8_offset      dw       0
sv8_segment     dw       0

power_meter    proc      near
        push      es                ; сохранить рабочие регистры
        push      bp
        push      bx
        push      cx
        push      dx
        push      si
        push      di
        mov       power_amt,ax      ; сохранить число проходов
                                    ;  измерителя
        mov       si,bx             ; сохранить указатель на
                                    ;  тестовую последовательность
        sub       bp,bp             ; установить знак того,
                                    ;  что выполняется первый
                                    ;  проход измерителя
                                    ;  производительности
        push      bp                ; установить признак
                                    ;  конца стека
        mov       es,bp             ; загрузить адрес таблицы
                                    ;  векторов прерываний
        mov       al,00110000b      ; запрогромировать канал 0
                                    ; платы TIMER CHIP
        out       43h,al
        jmp       short $+2
        sub       ax,ax
        out       40h,al
        jmp       short $+2
        out       40h,al
        jmp       short $+2
        cli                         ; запретить прерывания
        mov       ax,iv8_offset     ; заменить вектор прерывания
                                    ; 08h на адрес измерителя
        mov       sv8_offset,ax
        mov       ax,iv8_segment
        mov       sv8_segment,ax
        mov       iv8_segment,cs
        mov       iv8_offset,offset pm_000
        sub       bx,bx             ; обнулить накопитель
                                    ;  выполненных тестовых
                                    ;  последовательностей
        sub       dx,dx
        sub       di,di             ; обнулить счетчик проходов
                                    ;  измерителя
        jmp       short pm_210      ; начать измерение произво-
                                    ;  дительности
pm_000: or        bp,bp             ; самый первый проход ?
        mov       bp,1              ; установить признак начала
                                    ; измерения производительпости
        jz        pm_200            ; да, переход
        sub       ax,ax             ; подсчитать число
                                    ;  последовательностей,
                                    ;  выполненных за 1 мс
        sub       ax,cx
        add       bx,ax             ; учесть подсчитанное число
        adc       dx,0
pm_100: inc       di                ; увеличить счетчик проходов
        cmp       di,power_amt      ; все проходы выполнены ?
        jb        pm_200            ; нет, переход
        mov       bp,2              ; установить признак того,
                                    ;  что производительность
                                    ;  измерена
        mov       ax,bx             ; подсчитать и сохранить
                                    ;  среднюю производительность
        div       power_amt
        mov       bx,ax
pm_200: pop       ax                ; промыть стек
        pop       ax
        pop       ax
pm_201: pop       ax                ; выбрать последний элемент
                                    ;  стека
        or        ax,ax             ; конец стека ?
        jnz       pm_201            ; нет, продолжить промывание
                                    ;  стека
        mov       al,20h            ; послать команду EOI в
                                    ;  контролер прерываний 8259
                                    ;  Intel
        out       20h,al
        jmp       short $+2
        cmp       bp,2              ; измерение производительности
                                    ;  завершено ?
        je        pm_300            ; да, переход
        sub       ax,ax             ; установить признак конца
                                    ;  стека
        push      ax
pm_210: sub       cx,cx             ; заслать в CX максимальное
                                    ;  значение
        sti                         ; разрешить прерывания
        mov       ax,1193           ; установить счетчик TIMER
                                    ;  CHIP на 1 мс
        out       40h,al
        jmp       short $+2
        mov       al,ah
        out       40h,al
        jmp       short $+2
pm_220: call      si                ; выполнить тестовую последова-
                                    ; тельность
        loop      pm_220
pm_221: inc       ax                ; продолжить безрезультатный
                                    ;  цикл до тех пор,
                                    ;  пока не произойдет прерывание
                                    ;  от таймера
         jmp      short pm_221
pm_300:  mov      al,00110110b      ; восстановить среду, которая
                                    ;  была до того,
                                    ;  как начали измерять
                                    ;  производительность
         out      43h,al
         jmp      short $+2
         sub      ax,ax
         out      40h,al
         jmp      short $+2
         out      40h,al
         jmp      short $+2
         mov      ax,sv8_offset
         mov      iv8_offset,ax
         mov      ax,sv8_segment
         mov      iv8_segment,ax
         sti
         mov      ax,bx             ; загрузить среднюю
                                    ;  производительность
         pop      di                ; восстановить измененные
                                    ;  регистры
         pop       si
         pop       dx
         pop       cx
         pop       bx
         pop       bp
         pop       es
         ret
power_meter    endp

               end


